<<<<<<< HEAD
// contexts/AuthProvider.tsx 
=======
// contexts/AuthProvider.tsx
>>>>>>> 256fe69ae8d1d55b35b7a1738d867e10185f98a1
'use client';

import { createContext, useContext, useEffect, useState, useCallback } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { User, Session } from '@supabase/supabase-js';
import { UserProfile } from '@/types/database';
import { createMissingUserProfile } from '@/utils/fixMissingProfiles';

interface AuthContextType {
  user: User | null;
  session: Session | null;
  profile: UserProfile | null;
  loading: boolean;
  signOut: () => Promise<void>;
  refreshProfile: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType>({
  user: null,
  session: null,
  profile: null,
  loading: true,
  signOut: async () => {},
  refreshProfile: async () => {},
});

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);
  
  const supabase = createClientComponentClient();

  const fetchUserProfile = useCallback(async (userId: string, email: string) => {
    try {
<<<<<<< HEAD
      console.log('🔍 Fetching profile for user:', userId);
      console.log('📡 Supabase URL:', process.env.NEXT_PUBLIC_SUPABASE_URL);
      
      // Add a small delay to ensure database consistency
      await new Promise(resolve => setTimeout(resolve, 500));
=======
      console.log('Fetching profile for user:', userId);
>>>>>>> 256fe69ae8d1d55b35b7a1738d867e10185f98a1
      
      const { data: profile, error } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('id', userId)
        .single();

<<<<<<< HEAD
      console.log('📊 Profile query result:', { profile, error });

      if (error) {
        console.error('❌ Profile fetch error details:', {
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint
        });

        if (error.code === 'PGRST116') {
          // Profile doesn't exist, create it
          console.log('⚠️ Profile not found, creating missing profile...');
          try {
            const newProfile = await createMissingUserProfile(userId, email);
            console.log('✅ Created missing profile:', newProfile);
            setProfile(newProfile);
            return;
          } catch (createError) {
            console.error('❌ Failed to create missing profile:', createError);
            setProfile(null);
            return;
          }
        } else {
          // For 406 errors or other issues, let's try a different approach
          console.log('🔄 Trying alternative profile fetch...');
          try {
            const { data: profiles, error: listError } = await supabase
              .from('user_profiles')
              .select('*')
              .eq('id', userId);
            
            console.log('📋 Alternative query result:', { profiles, listError });
            
            if (profiles && profiles.length > 0) {
              console.log('✅ Found profile via alternative method');
              setProfile(profiles[0]);
              return;
            } else if (!listError) {
              console.log('⚠️ No profile found via alternative method, creating...');
              const newProfile = await createMissingUserProfile(userId, email);
              setProfile(newProfile);
              return;
            }
          } catch (altError) {
            console.error('❌ Alternative fetch also failed:', altError);
          }
          
=======
      if (error) {
        if (error.code === 'PGRST116') {
          // Profile doesn't exist, create it
          console.log('Profile not found, creating missing profile...');
          const newProfile = await createMissingUserProfile(userId, email);
          setProfile(newProfile);
          return;
        } else {
          console.error('Error fetching profile:', error);
>>>>>>> 256fe69ae8d1d55b35b7a1738d867e10185f98a1
          throw error;
        }
      }

<<<<<<< HEAD
      console.log('✅ Profile found successfully:', profile);
      setProfile(profile);
    } catch (error) {
      console.error('💥 Failed to fetch/create user profile:', error);
      setProfile(null);
      
      // Don't throw the error - let the UI handle the null profile state
      // This prevents infinite loading
=======
      console.log('Profile found:', profile);
      setProfile(profile);
    } catch (error) {
      console.error('Failed to fetch/create user profile:', error);
      setProfile(null);
>>>>>>> 256fe69ae8d1d55b35b7a1738d867e10185f98a1
    }
  }, [supabase]);

  const refreshProfile = async () => {
    if (user?.id && user?.email) {
<<<<<<< HEAD
      console.log('🔄 Manually refreshing profile...');
=======
>>>>>>> 256fe69ae8d1d55b35b7a1738d867e10185f98a1
      await fetchUserProfile(user.id, user.email);
    }
  };

  const signOut = async () => {
    try {
      await supabase.auth.signOut();
      setUser(null);
      setSession(null);
      setProfile(null);
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };

  useEffect(() => {
    let mounted = true;

    // Get initial session
    const getInitialSession = async () => {
      try {
<<<<<<< HEAD
        console.log('🚀 Getting initial session...');
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('❌ Error getting session:', error);
=======
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('Error getting session:', error);
>>>>>>> 256fe69ae8d1d55b35b7a1738d867e10185f98a1
          if (mounted) setLoading(false);
          return;
        }

<<<<<<< HEAD
        console.log('📱 Initial session:', session ? 'Found' : 'None');
=======
        console.log('Initial session:', session);
>>>>>>> 256fe69ae8d1d55b35b7a1738d867e10185f98a1
        if (mounted) {
          setSession(session);
          setUser(session?.user ?? null);
        }

        if (session?.user?.id && session?.user?.email && mounted) {
          await fetchUserProfile(session.user.id, session.user.email);
        }
      } catch (error) {
<<<<<<< HEAD
        console.error('💥 Error in getInitialSession:', error);
=======
        console.error('Error in getInitialSession:', error);
>>>>>>> 256fe69ae8d1d55b35b7a1738d867e10185f98a1
      } finally {
        if (mounted) setLoading(false);
      }
    };

    getInitialSession();

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
<<<<<<< HEAD
        console.log('🔄 Auth state changed:', event, session ? 'Session exists' : 'No session');
=======
        console.log('Auth state changed:', event, session);
>>>>>>> 256fe69ae8d1d55b35b7a1738d867e10185f98a1
        
        if (mounted) {
          setSession(session);
          setUser(session?.user ?? null);
        }

        if (session?.user?.id && session?.user?.email && mounted) {
          await fetchUserProfile(session.user.id, session.user.email);
        } else if (mounted) {
          setProfile(null);
        }

        if (mounted) setLoading(false);
      }
    );

    return () => {
      mounted = false;
      subscription?.unsubscribe();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [supabase]);

  return (
    <AuthContext.Provider value={{
      user,
      session,
      profile,
      loading,
      signOut,
      refreshProfile,
    }}>
      {children}
    </AuthContext.Provider>
  );
}